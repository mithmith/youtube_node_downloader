import os

from loguru import logger
from telegram import Message, Update
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown

from app.config import settings
from app.integrations.telegram.utils import extract_original_user_id, format_telegram_message

MAX_TELEGRAM_VIDEO_SIZE = 50 * 1024 * 1024  # 50 MB


async def send_test_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram."""
    channel_name = "Lenin Crew"
    channel_url = "https://www.youtube.com/@lenincrew"
    video_title = "–ù–∏–∫–æ–ª–∞–π –ù–µ–∫—Ä–∞—Å–æ–≤ ‚Äì –ù–∞ –≤–æ–ª–≥–µ | LC. –ö—É–ª—å—Ç—É—Ä–∞"
    video_url = "https://www.youtube.com/watch?v=le94-lVtrys"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await context.bot.send_message(
        chat_id=settings.tg_group_id,
        text=format_telegram_message(channel_name, channel_url, video_title, video_url),
        parse_mode="Markdown",
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")


async def send_test_shorts_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_path = "../test_shorts_video_w6CxKyVLtmo.mp4"
    channel_name = "–≠—Ç–æ –±–∞–∑–∏—Å"
    channel_url = "https://www.youtube.com/@eto_basis"
    video_title = "–ü–æ—á–µ–º—É –≤–ª–∞—Å—Ç—å –±–æ–∏—Ç—Å—è –±—É–º–∞–∂–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω—á–∏–∫–æ–≤ –∏ –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ë–æ–≥–æ—Ä–æ–¥–∏—Ü–µ–π?"
    video_url = "https://www.youtube.com/shorts/w6CxKyVLtmo"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
    if os.path.getsize(video_path) > MAX_TELEGRAM_VIDEO_SIZE:
        logger.error(
            f"–í–∏–¥–µ–æ {video_url} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram! ({os.path.getsize(video_path) / (1024 * 1024):.2f} MB)"
        )
        return

    await context.bot.send_video(
        chat_id=settings.tg_admin_id,
        video=open(video_path, "rb"),
        caption=format_shorts_message(channel_name, channel_url, video_title, video_url),
        parse_mode="Markdown",
    )


def format_shorts_message(channel_name: str, channel_url: str, video_title: str, video_url: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ."""
    return (
        f"üé• [{escape_markdown(video_title)}]({video_url})\n"
        f"üé¨ *–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!*"
        f" –ù–∞ –∫–∞–Ω–∞–ª–µ ¬´[{escape_markdown(channel_name)}]({channel_url})¬ª\n"
        + escape_markdown(f'\n#Shorts #YouTube #{channel_name.replace(" ", "_")}')
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    admin_users_ids = [settings.tg_admin_id]
    user_id = update.effective_user.id
    full_username = update.effective_user.full_name
    text = update.message.text
    logger.debug(f"Received message from user {full_username} ({user_id}): {text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    reply_to_message: Message = update.message.reply_to_message
    if reply_to_message and reply_to_message.from_user and reply_to_message.from_user.id == context.bot.id:
        logger.debug("Message is a reply to the bot")

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            original_user_id = extract_original_user_id(reply_to_message.text)
        except Exception as e:
            logger.error(f"Failed to extract original user ID from reply: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
            )
            return

        if original_user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=original_user_id,
                    text=text,
                )
                logger.debug(f"Sent reply to original user {original_user_id}")
            except Exception as e:
                logger.error(f"Failed to send reply to original user {original_user_id}: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_user_id}.",
                )
                return

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∫—Ä–æ–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for admin_id in admin_users_ids:
                if str(admin_id) != str(original_user_id) and str(admin_id) != str(user_id):
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=(
                                f"–û—Ç–≤–µ—Ç –æ—Ç {full_username} (tg://user?id={user_id}) "
                                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (id={original_user_id}):\n{text}"
                            ),
                            # parse_mode="Text",
                        )
                        logger.debug(f"Forwarded reply to admin {admin_id}")
                    except Exception as e:
                        logger.error(f"Failed to forward reply to admin {admin_id}: {e}")
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å—ã–ª–∞–µ–º –µ–≥–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    logger.debug("Message is not a reply. Forwarding to all admins.")
    for admin_id in admin_users_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {full_username} (id={user_id}):\n{text}"),
                # parse_mode="Text",
            )
            logger.debug(f"Forwarded message to admin {admin_id}")
        except Exception as e:
            logger.error(f"Failed to forward message to admin {admin_id}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
    await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
