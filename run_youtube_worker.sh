#!/bin/bash

##################################################################
# Usage: 
#   run_youtube_worker.sh start /path/to/some.env /path/to/list.json [-d]
#   run_youtube_worker.sh stop  /path/to/some.env /path/to/list.json
#   run_youtube_worker.sh logs  /path/to/some.env /path/to/list.json
#   run_youtube_worker.sh restart ...
##################################################################

ACTION=$1           # start|stop|logs|restart
ENV_FILE=$2         # /path/to/*.env
CHANNELS_JSON=$3    # /path/to/*.json
MODE=$4             # -d (detach) –∏–ª–∏ –ø—É—Å—Ç–æ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ -z "$ACTION" || -z "$ENV_FILE" ]]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (start|stop|logs|restart) –∏ –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É!"
  echo "–ü—Ä–∏–º–µ—Ä: $0 start /home/localserver/channels/workerchronicles/workerchronicles.env /home/localserver/channels/workerchronicles/workerchronicles.json [-d]"
  exit 1
fi

# –ï—Å–ª–∏ start, —Ç–æ —Ç—Ä–µ–±—É–µ–º JSON-—Ñ–∞–π–ª
if [[ "$ACTION" == "start" && -z "$CHANNELS_JSON" ]]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å JSON-—Ñ–∞–π–ª!"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [[ ! -f "$ENV_FILE" ]]; then
  echo "‚ùå –û—à–∏–±–∫–∞: .env —Ñ–∞–π–ª '$ENV_FILE' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (—É–±–∏—Ä–∞—è —Å—Ç—Ä–æ–∫–∏ —Å #)
export $(grep -v '^#' "$ENV_FILE" | xargs)

# -------------------------------------------
# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------------------------

# DOCKER_NETWORK (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ env, –∏—Å–ø–æ–ª—å–∑—É–µ–º default)
if [[ -z "$DOCKER_NETWORK" ]]; then
  DOCKER_NETWORK="proxy_net"
fi

# DOCKER_IMAGE (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞, –ø—É—Å—Ç—å –±—É–¥–µ—Ç youtube-monitoring-app)
if [[ -z "$DOCKER_IMAGE" ]]; then
  DOCKER_IMAGE="youtube-monitoring-app"
fi

# CONTAINER_NAME —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-—Ñ–∞–π–ª–∞ (youtube-–∏–º—è_—Ñ–∞–π–ª–∞)
# –ü—Ä–∏–º–µ—Ä: channels_list.json -> youtube-channels_list
if [[ "$ACTION" == "start" ]]; then
  CONTAINER_NAME="youtube-$(basename "$CHANNELS_JSON" .json)"
else
  # –ï—Å–ª–∏ –º—ã –¥–µ–ª–∞–µ–º stop|logs|restart, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
  # –õ–∏–±–æ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è, –ª–∏–±–æ (–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ) –ø–æ–ø—Ä–æ—Å–∏–º —É–∫–∞–∑—ã–≤–∞—Ç—å —è–≤–Ω–æ.
  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É:
  CONTAINER_NAME="youtube-$(basename "$CHANNELS_JSON" .json)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ç—å
if ! docker network ls --format '{{.Name}}' | grep -q "^$DOCKER_NETWORK$"; then
  echo "üåê –°–µ—Ç—å $DOCKER_NETWORK –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é..."
  docker network create "$DOCKER_NETWORK"
  if [[ $? -ne 0 ]]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç–∏ $DOCKER_NETWORK!"
    exit 1
  fi
fi

# –õ–æ–≥–∏: LOGS_PATH (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±—É–¥–µ—Ç /app/logs)
if [[ -z "$LOGS_PATH" ]]; then
  echo "‚ö†Ô∏è  LOGS_PATH –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –õ–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–±—Ä–æ—à–µ–Ω—ã."
  MOUNT_LOGS=""
else
  mkdir -p "$LOGS_PATH"
  MOUNT_LOGS="-v \"$(realpath "$LOGS_PATH"):/app/logs\""
fi

# –•—Ä–∞–Ω–∏–ª–∏—â–µ: STORAGE_PATH (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ /app/storage ‚Äî –∏–ª–∏ –∫–∞–∫ –≤–∞–º –Ω—É–∂–Ω–æ)
if [[ -z "$STORAGE_PATH" ]]; then
  echo "‚ö†Ô∏è  STORAGE_PATH –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –ù–µ –±—É–¥–µ—Ç –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
  MOUNT_STORAGE=""
else
  mkdir -p "$STORAGE_PATH"
  MOUNT_STORAGE="-v \"$(realpath "$STORAGE_PATH"):/app/storage\""
fi

# –®–∞–±–ª–æ–Ω—ã
if [[ -n "$TG_NEW_VIDEO_TEMPLATE" && -f "$TG_NEW_VIDEO_TEMPLATE" ]]; then
  MOUNT_NEW_VIDEO="-v \"$(realpath "$TG_NEW_VIDEO_TEMPLATE"):/app/templates/new_video.md\""
else
  MOUNT_NEW_VIDEO=""
fi

if [[ -n "$TG_SHORTS_TEMPLATE" && -f "$TG_SHORTS_TEMPLATE" ]]; then
  MOUNT_SHORTS="-v \"$(realpath "$TG_SHORTS_TEMPLATE"):/app/templates/shorts.md\""
else
  MOUNT_SHORTS=""
fi

# –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è docker run
# –ö–∞–Ω–∞–ª—ã –±—É–¥—É—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ /app/channels_list.json
RUN_DOCKER_CMD="
docker run \
--name \"$CONTAINER_NAME\" \
--network \"$DOCKER_NETWORK\" \
--env-file \"$ENV_FILE\" \
$MOUNT_LOGS \
$MOUNT_STORAGE \
$MOUNT_NEW_VIDEO \
$MOUNT_SHORTS \
-v \"$(realpath "$CHANNELS_JSON"):/app/channels_list.json\" \
"

# –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
if [[ "$MODE" == "-d" ]]; then
  RUN_DOCKER_CMD="$RUN_DOCKER_CMD -d"
else
  # –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  RUN_DOCKER_CMD="$RUN_DOCKER_CMD --rm"
fi

# –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥–æ–π –æ–± –æ–±—Ä–∞–∑–µ
RUN_DOCKER_CMD="$RUN_DOCKER_CMD $DOCKER_IMAGE
"

# -------------------------------------------
# –í–µ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
# -------------------------------------------
case "$ACTION" in
  start)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ)
    if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
      echo "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏ —É–¥–∞–ª—è—é..."
      docker stop "$CONTAINER_NAME"
      docker rm "$CONTAINER_NAME"
    fi
    
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME"
    echo "   –û–±—Ä–∞–∑: $DOCKER_IMAGE"
    echo "   –°–µ—Ç—å:  $DOCKER_NETWORK"
    echo "   JSON:  $CHANNELS_JSON"
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    eval "$RUN_DOCKER_CMD"
    ;;
  
  stop)
    echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME..."
    docker stop "$CONTAINER_NAME"
    ;;
  
  logs)
    echo "üìú –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $CONTAINER_NAME..."
    docker logs -f "$CONTAINER_NAME"
    ;;
  
  restart)
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $CONTAINER_NAME..."
    docker stop "$CONTAINER_NAME"
    sleep 2
    docker start "$CONTAINER_NAME"
    ;;
  
  *)
    echo "Usage: $0 {start|stop|logs|restart} /path/to/envfile /path/to/json [-d]"
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start   /home/user/my.env /home/user/list.json      # –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  $0 start   /home/user/my.env /home/user/list.json -d   # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  $0 stop    /home/user/my.env /home/user/list.json      # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  $0 logs    /home/user/my.env /home/user/list.json      # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  $0 restart /home/user/my.env /home/user/list.json      # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    exit 1
    ;;
esac
